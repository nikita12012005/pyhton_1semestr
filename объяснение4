**1. Создание структуры базы данных**
Мы используем базу данных SQLite, которая проста в использовании и не требует отдельной установки.  

1. Созданы две таблицы:
   - **`students`**: хранит информацию о студентах (имя, возраст, факультет).
   - **`works`**: хранит информацию о самостоятельных работах студентов (название работы и оценка).
2. Таблицы связаны через внешний ключ `student_id` (каждая работа привязана к конкретному студенту).


**2. Чтение данных из CSV**
CSV-файл содержит данные о студентах, их возрасте, факультете, а также о работах и оценках.

Для чтения:
- Используется модуль `csv`.
- Данные из CSV преобразуются в список словарей, где каждый словарь — это запись о студенте.


**3. Сохранение данных в базу**
Для каждой строки из CSV:
1. Добавляем студента в таблицу `students`.
2. Получаем уникальный идентификатор студента (`id`) после добавления.
3. Используем этот `id`, чтобы добавить работы студента в таблицу `works`.


**4. Запросы к базе**
Мы реализовали функции для выполнения запросов к базе:

1. **Получение всех студентов:**
   - Запрашиваем все записи из таблицы `students`.
   - Это позволяет вывести список всех студентов.

2. **Получение работ конкретного студента:**
   - Используем SQL-запрос с объединением таблиц `students` и `works` по `student_id`.
   - Фильтруем данные по имени студента.

3. **Расчет среднего балла студента:**
   - С помощью функции `AVG` в SQL вычисляем среднее значение оценок для студента.

**5. Интеграция и вызов функций**
1. Программа сначала создает базу данных (`students.db`) и таблицы, если их еще нет.
2. Затем данные из CSV сохраняются в базу.
3. Мы реализуем интерфейс для получения данных:
   - Выводим список всех студентов.
   - Показываем работы конкретного студента.
   - Вычисляем средний балл студента.
